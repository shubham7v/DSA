class node{
    public:
    int data,row,col;
    
    node(int data,int row,int col){
        this->data = data;
        this->row = row;
        this->col = col;
    }
};

class cmp{
    public:
    bool operator()(node *a,node *b){
        return a->data > b->data;
    }
};

class Solution{
    public:
    pair<int,int> findSmallestRange(int arr[][N], int n, int k)
    {
        int mini = INT_MAX;
        int maxi = INT_MIN;
        priority_queue<node*,vector<node*>,cmp>pq;
        
        for(int i = 0;i<k;i++){
            int ele = arr[i][0];
            mini = min(mini,ele);
            maxi = max(maxi,ele);
            pq.push(new node(ele,i,0));
        }
        
        int start = mini,end = maxi;
        
        while(!pq.empty()){
            node *temp = pq.top();
            pq.pop();
            
            if(maxi - temp->data < end - start){
                mini = temp->data;
                start = mini;
                end = maxi;
            }
            
            if(temp->col + 1 < n){
                maxi = max(maxi,arr[temp->row][temp->col + 1]);
                pq.push(new node(arr[temp->row][temp->col + 1],temp->row,temp->col+1));
            }
            else{
                break;
            }
        }
        return {start,end};
        
    }
};